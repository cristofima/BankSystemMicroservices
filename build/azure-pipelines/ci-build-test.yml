trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - 'src/services/**/src/**'
      - 'src/services/**/tests/**'
      - 'build/azure-pipelines/ci-build-test.yml'
    exclude:
      - 'src/services/**/*.md'
      - 'src/services/**/README.md'

variables:
  buildConfiguration: 'Release'
  solution: 'src/BankSystem.sln'
  testProjectsPattern: 'src/**/tests/**/*.csproj'
  coverageReportsFolder: '$(Agent.TempDirectory)/CoverageReports'

stages:
- stage: BuildAndTest
  jobs:

  - job: Ubuntu
    displayName: 'Ubuntu Agent'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.x'

    # Docker is already installed & running on ubuntu-latest
    - bash: docker info
      displayName: "Verify Docker engine"

    - task: SonarQubePrepare@7
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'dotnet'
        projectKey: '$(SONAR_PROJECT_KEY)'
        projectName: '$(SONAR_PROJECT_NAME)'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests with Code Coverage'
      inputs:
        command: 'test'
        projects: |
          **/tests/**/*UnitTests.csproj
        arguments: >
          --configuration $(buildConfiguration)
          --no-build
          --collect:"Code Coverage"
          --settings $(Build.SourcesDirectory)/src/coverlet.runsettings
          --logger trx
          --logger "console;verbosity=normal"
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Run Integration Tests with Code Coverage'
      inputs:
        command: 'test'
        projects: |
          **/tests/**/*IntegrationTests.csproj
        arguments: >
          --configuration $(buildConfiguration)
          --no-build
          --collect:"Code Coverage"
          --settings $(Build.SourcesDirectory)/src/coverlet.runsettings
          --logger trx
          --logger "console;verbosity=normal"
        publishTestResults: true
      # Note: TestContainers will automatically use Docker on Linux
      continueOnError: true

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage to Azure DevOps'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(coverageReportsFolder)/**/coverage.cobertura.xml'

    - task: SonarQubeAnalyze@7
      displayName: 'Run SonarQube Analysis'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: SonarQubePublish@7
      displayName: 'Publish SonarQube Quality Gate Result'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))