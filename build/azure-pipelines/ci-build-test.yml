trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - 'src/services/**/src/**'
      - 'src/services/**/tests/**'
      - 'build/azure-pipelines/ci-build-test.yml'
    exclude:
      - 'src/services/**/*.md'
      - 'src/services/**/README.md'

variables:
  buildConfiguration: 'Release'
  solution: 'src/BankSystem.sln'
  testProjectsPattern: 'src/**/tests/**/*.csproj'
  resultsDirectory: '$(Agent.TempDirectory)/TestResults'
  coverageDirectory: '$(Build.SourcesDirectory)/coverage'

stages:
- stage: BuildAndTest
  jobs:

  - job: Ubuntu
    displayName: 'Ubuntu Agent'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.x'

    # Docker is already installed & running on ubuntu-latest
    - bash: docker info
      displayName: "Verify Docker engine"

    - task: SonarQubePrepare@7
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'dotnet'
        projectKey: '$(SONAR_PROJECT_KEY)'
        projectName: '$(SONAR_PROJECT_NAME)'
        extraProperties: |
          sonar.organization=$(SONAR_ORGANIZATION)
          sonar.sources=src/services
          sonar.exclusions=**/bin/**/*,**/obj/**/*,**/Migrations/**/*,**/*.Designer.cs,**/ModelSnapshot.cs,**/Program.cs
          sonar.tests=src/services
          sonar.test.inclusions=**/tests/**/*Test*.cs,**/tests/**/*Tests.cs
          sonar.test.exclusions=**/bin/**/*,**/obj/**/*
          sonar.cs.opencover.reportsPaths=$(coverageDirectory)/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(resultsDirectory)/**/*.trx
          sonar.coverage.exclusions=**/tests/**/*,**/Migrations/**/*,**/*.Designer.cs,**/ModelSnapshot.cs,**/Program.cs
          sonar.sourceEncoding=UTF-8
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - bash: |
        echo "Listing test projects..."
        find $(Build.SourcesDirectory) -name "*UnitTests.csproj" -o -name "*IntegrationTests.csproj"
        echo "Solution directory structure:"
        ls -la $(Build.SourcesDirectory)/src/services/
        echo "Checking if test projects are built..."
        ls -la $(Build.SourcesDirectory)/src/services/Security/tests/Security.Application.UnitTests/bin/$(buildConfiguration)/net9.0/ || echo "Unit test build output not found"
        ls -la $(Build.SourcesDirectory)/src/services/Security/tests/Security.Infrastructure.IntegrationTests/bin/$(buildConfiguration)/net9.0/ || echo "Integration test build output not found"
      displayName: 'Debug - List Test Projects and Build Output'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests with Code Coverage'
      inputs:
        command: 'test'
        projects: 'src/services/Security/tests/Security.Application.UnitTests/Security.Application.UnitTests.csproj'
        arguments: '--configuration $(buildConfiguration) --logger "console;verbosity=normal" --collect:"XPlat Code Coverage" --results-directory "$(resultsDirectory)" --settings "$(Build.SourcesDirectory)/src/coverlet.runsettings"'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Run Integration Tests with Code Coverage'
      inputs:
        command: 'test'
        projects: 'src/services/Security/tests/Security.Infrastructure.IntegrationTests/Security.Infrastructure.IntegrationTests.csproj'
        arguments: '--configuration $(buildConfiguration) --logger "console;verbosity=normal" --collect:"XPlat Code Coverage" --results-directory "$(resultsDirectory)" --settings "$(Build.SourcesDirectory)/src/coverlet.runsettings"'
        publishTestResults: true
      # Note: TestContainers will automatically use Docker on Linux
      continueOnError: true

    - bash: |
        echo "Listing coverage files in TestResults..."
        find $(resultsDirectory) -name "*.xml" | grep -i coverage
        echo "Checking for OpenCover format files..."
        find $(resultsDirectory) -name "coverage.opencover.xml"
        echo "Checking for Cobertura format files..."
        find $(resultsDirectory) -name "coverage.cobertura.xml"
        echo "All coverage-related files:"
        find $(resultsDirectory) -name "*coverage*"
        echo "All XML files in TestResults:"
        find $(resultsDirectory) -name "*.xml" -type f
        echo "TestResults directory structure:"
        find $(resultsDirectory) -type d
        if [ -d "$(resultsDirectory)" ]; then
          for dir in $(resultsDirectory)/*/; do
            if [ -d "$dir" ]; then
              echo "Directory: $dir"
              ls -la "$dir"
            fi
          done
        fi
      displayName: 'Debug - List Coverage Files'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage to Azure DevOps'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(resultsDirectory)/**/coverage.cobertura.xml'
        pathToSources: '$(Build.SourcesDirectory)/src'
        failIfCoverageEmpty: false
      condition: succeeded()

    - bash: |
        echo "Copying coverage files for SonarQube..."
        mkdir -p $(coverageDirectory)
        
        # Find and copy all OpenCover XML files
        find $(resultsDirectory) -name "*.xml" -type f | while read file; do
          echo "Processing file: $file"
          
          # Check if file contains OpenCover format indicators
          if grep -q "opencover" "$file" 2>/dev/null || grep -q "CoverageSession" "$file" 2>/dev/null; then
            echo "Found OpenCover file: $file"
            cp "$file" $(coverageDirectory)/coverage.opencover.xml
          elif grep -q "cobertura" "$file" 2>/dev/null || grep -q "<?xml.*coverage" "$file" 2>/dev/null; then
            echo "Found Cobertura file: $file"
            cp "$file" $(coverageDirectory)/coverage.cobertura.xml
          fi
        done
        
        # If no specific format files found, copy all XML files with coverage in name
        if [ ! -f "$(coverageDirectory)/coverage.opencover.xml" ]; then
          echo "No OpenCover file found, looking for any coverage files..."
          find $(resultsDirectory) -name "*coverage*.xml" -type f | head -1 | xargs -I {} cp {} $(coverageDirectory)/coverage.opencover.xml 2>/dev/null || true
        fi
        
        echo "Final coverage files:"
        ls -la $(coverageDirectory)/ || echo "No coverage directory created"
        
        # Show content of coverage files for debugging
        for file in $(coverageDirectory)/*.xml; do
          if [ -f "$file" ]; then
            echo "Content preview of $file:"
            head -20 "$file"
            echo "File size: $(wc -c < "$file") bytes"
          fi
        done
      displayName: 'Copy Coverage Files for SonarQube'

    - task: SonarQubeAnalyze@7
      displayName: 'Run SonarQube Analysis'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))

    # Fallback SonarQube analysis using CLI scanner if MSBuild fails
    - task: SonarQubePrepare@7
      displayName: 'Prepare SonarQube Analysis (CLI Fallback)'
      inputs:
        SonarQube: 'SonarQube'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'CLI'
        configMode: 'file'
        configFile: 'sonar-project.properties'
        extraProperties: |
          sonar.projectKey=$(SONAR_PROJECT_KEY)
          sonar.projectName=$(SONAR_PROJECT_NAME)
          sonar.organization=$(SONAR_ORGANIZATION)
          sonar.cs.opencover.reportsPaths=$(coverageDirectory)/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(resultsDirectory)/**/*.trx
      condition: and(failed(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: SonarQubeAnalyze@7
      displayName: 'Run SonarQube Analysis (CLI Fallback)'
      condition: and(failed(), ne(variables['SONAR_PROJECT_KEY'], ''))

    - task: SonarQubePublish@7
      displayName: 'Publish SonarQube Quality Gate Result'
      condition: and(succeeded(), ne(variables['SONAR_PROJECT_KEY'], ''))